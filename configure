#!/bin/bash
# Prepare runtime files for the QEMU emulator.
# This installs QEMU if missing, downloads Raspberry Pi OS,
# and extracts kernel and DTB files into ./runtime.
set -euo pipefail

RUNTIME=${RUNTIME:-runtime}
IMG_URL=${IMG_URL:-"https://downloads.raspberrypi.org/raspios_arm64/images/raspios_arm64-2024-03-12/2024-03-12-raspios-bookworm-arm64.img.xz"}
IMG_ZIP="$RUNTIME/raspios.img.xz"
IMG="$RUNTIME/raspios.img"
KERNEL="$RUNTIME/kernel8.img"
DTB="$RUNTIME/bcm2710-rpi-3-b-plus.dtb"

mkdir -p "$RUNTIME"

os_id=$(awk -F= '/^ID=/{print $2}' /etc/os-release | tr -d '"')

install_packages() {
  case "$os_id" in
    debian|ubuntu)
      sudo apt-get update
      sudo apt-get install -y \
        qemu-system-aarch64 qemu-efi-aarch64 qemu-utils \
        curl unzip ansible apt-utils
      ;;
    fedora)
      sudo dnf install -y @virtualization qemu-system-aarch64 curl unzip ansible
      ;;
    *)
      echo "Unsupported OS $os_id" >&2
      exit 1
      ;;
  esac
}

if ! command -v qemu-system-aarch64 >/dev/null; then
  echo "Installing QEMU and tools..."
  install_packages
fi

if [ ! -f "$IMG" ]; then
  echo "Downloading Raspberry Pi OS image..."
  curl -L "$IMG_URL" -o "$IMG_ZIP"
  unxz -k "$IMG_ZIP"
  echo "Resizing image to 8G to satisfy QEMU..."
  if command -v qemu-img >/dev/null; then
    qemu-img resize "$IMG" 8G
  else
    echo "qemu-img not found; skipping resize" >&2
  fi
fi

if [ ! -f "$KERNEL" ] || [ ! -f "$DTB" ]; then
  echo "Extracting kernel and DTB from image..."
  offset=$(parted -m "$IMG" unit B print | awk -F: '$1==1 {gsub(/B/,"",$2); print $2}')
  tmpdir=$(mktemp -d)
  sudo mount -o loop,offset=$offset "$IMG" "$tmpdir"
  sudo cp "$tmpdir/kernel8.img" "$KERNEL"
  sudo cp "$tmpdir/bcm2710-rpi-3-b-plus.dtb" "$DTB"
  sudo umount "$tmpdir"
  rmdir "$tmpdir"
fi

echo "Runtime prepared in $RUNTIME" && ls -1 "$RUNTIME"
