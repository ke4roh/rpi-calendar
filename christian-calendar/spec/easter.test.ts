/// <reference types="node" />
import Easter from '../src/libs/easter';
import DateWithoutTime from "../src/libs/dateWithoutTime";

describe('gregorianEaster', () => {
  it('should return the correct date of Easter for a given year', () => {
    const easterDates = [
        "1600-04-02", "1601-04-22", "1602-04-07", "1603-03-30", "1604-04-18", "1605-04-10",
        "1874-04-05", "1875-03-28", "1876-04-16", "1877-04-01", "1878-04-21", "1879-04-13",
        "2021-04-04", "2022-04-17", "2023-04-09", "2024-03-31", "2025-04-20", "2026-04-05",
        "2027-03-28"
    ];

    for (const dateString of easterDates) {
      const date = new DateWithoutTime(dateString);
      expect(Easter.gregorianEaster(date.year)).toEqual(date);
    }
  });

  it('should throw an exception for a year less than 1582', () => {
    expect(() => { Easter.gregorianEaster(1581); }).toThrow("Invalid before 1582");
  });
});

// describe('orthodoxEaster', () => {
  // ------------------> GREGORIAN CALENDAR <---------------------
  //     Date    Years of Occurrence of Orthodox Easter
  // 4/3	none
  // 4/4	1915 2010
  // 4/5	1885 1896 1942 1953 2037 2048 2105
  // 4/6	1980
  // 4/7	1912 1991 2075 2086
  // 4/8	1877 1923 1934 2007 2018 2029 2091
  // 4/9	1882 1893 1939 1950 1961 1972 2034 2045 2056 2102 2113 2124
  // 4/10	1904 1966 1977 1988 2061 2067 2072
  // 4/11	1909 1920 1999 2004 2083 2094
  // 4/12	1931 1936 2015 2026 2099
  // 4/13	1879 1890 1947 1958 1969 2031 2042 2053 2064 2110 2121
  // 4/14	1895 1901 1963 1974 1985 1996 2058 2069 2080 2115
  // 4/15	1906 1917 1928 1990 2001 2012 2085 2096
  // 4/16	1876 1922 1933 1944 2017 2023 2028
  // 4/17	1887 1892 1898 1955 1960 2039 2050 2107 2112 2118
  // 4/18	1971 1982 1993 2055 2066 2077 2088 2123
  // 4/19	1903 1914 1925 1987 1998 2009 2020 2071 2082 2093
  // 4/20	1884 1919 1930 1941 1952 2014 2025 2036 2104
  // 4/21	1889 1946 1957 1968 2041 2047 2052 2109 2120
  // 4/22	1900 1979 1984 2063 2074
  // 4/23	1911 1916 1995 2006 2079 2090
  // 4/24	1881 1927 1938 1949 2011 2022 2033 2044 2095 2101
  // 4/25	1875 1886 1897 1943 1954 1965 1976 2038 2049 2060 2106 2117
  // 4/26	1908 1970 1981 1992 2065 2076
  // 4/27	1902 1913 1924 1997 2003 2008 2087 2092 2098
  // 4/28	1878 1935 1940 2019 2030
  // 4/29	1883 1894 1951 1962 1973 2035 2046 2057 2068 2103 2114
  // 4/30	1899 1905 1967 1978 1989 2000 2062 2073 2084 2119
  // 5/1	1910 1921 1932 1994 2005 2016 2089
  // 5/2	1880 1926 1937 1948 2021 2027 2032 2100
  // 5/3	1891 1959 1964 2043 2054 2111 2116 2122
  // 5/4	1975 1986 2059 2070 2081
  // 5/5	1907 1918 1929 2002 2013 2024 2097
  // 5/6	1888 1945 1956 2040 2108
  // 5/7	2051
  // 5/8	1983 2078
  // 5/9	none

  // it('should return the correct date of Easter for a given year', () => {
  //    const easterDates = {
  //      "4-4": [1915, 2010],
  //      "4-5": [1885, 1896, 1942, 1953, 2037, 2048, 2105],
  //      "4-6": [1980],
  //      "4-7": [1912, 1991, 2075, 2086],
  //      "4-8": [1877, 1923, 1934, 2007, 2018, 2029, 2091],
  //      "4-9": [1882, 1893, 1939, 1950, 1961, 1972, 2034, 2045, 2056, 2102, 2113, 2124],
  //      "4-10": [1904, 1966, 1977, 1988, 2061, 2067, 2072],
  //      "4-11": [1909, 1920, 1999, 2004, 2083, 2094],
  //      "4-12": [1931, 1936, 2015, 2026, 2099],
  //      "4-30": [1899, 1905, 1967, 1978, 1989, 2000, 2062, 2073, 2084, 2119],
  //      "5-1": [1910, 1921, 1932, 1994, 2005, 2016, 2089],
  //      "5-2": [1880, 1926, 1937, 1948, 2021, 2027, 2032, 2100],
  //      "5-8": [1983, 2078]
  //    }
  //    for (const [monthDay, years] of Object.entries(easterDates)) {
  //       for (const year of years) {
  //         const date = new DateWithoutTime(`${year}-${monthDay}`);
  //         expect(Easter.orthodoxEaster(year)).toEqual(date);
  //       }
  //    }
  // });
// });
